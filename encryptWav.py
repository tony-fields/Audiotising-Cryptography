import myWav_moduleimport osfrom cryptography.fernet import Fernetdef main():    #input data    file = input("Enter a wav file to be encrypted: ")    output = input("Enter the name you want the encrypted file to be named:")    if(output == ""):        output = file[:-4]+ "-encrypted.wav"         print(output)        #split the wav file into header.bin and content.bin    sample_rate, bits_per_sample, num_chans = myWav_module.split_wav(file)    print(sample_rate, bits_per_sample,  num_chans)            #encrypt header.bin    # Generate a key and save it securely (needed for decryption)    key = Fernet.generate_key()    print("Here is the encryption key:", key.decode())    cipher_suite = Fernet(key)        encrypted_file_path = "content2.bin"    with open("content.bin", "rb") as input_file, open(encrypted_file_path, "wb") as encrypted_file:        while chunk := input_file.read(int(bits_per_sample/8)):  # Read how many bytes there are in a sample at a time            encrypted_chunk = cipher_suite.encrypt(chunk)            encrypted_file.write(encrypted_chunk)        #combine encrypted header.bin and content.bin    myWav_module.combine_files(output, "header.bin", encrypted_file_path)                #clean up directory    os.remove("header.bin")    os.remove("content.bin")    os.remove(encrypted_file_path)            if __name__ == "__main__":    main()